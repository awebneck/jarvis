#!/usr/bin/perl
################################################################################
# Dummy modules:
################################################################################
package Jarvis::IRC;
use POE;
sub new { 
          my $class = shift; 
          my $self = {}; 
          $self->{'states'} = { 
                                _start           => '_start',
                                _stop            => '_stop',
                                #_default         => '_default',
                                #irc_001              => 'irc_001',
                                #irc_public           => 'irc_public',
                                #irc_ping             => 'irc_ping',
                                #irc_msg              => 'irc_msg',
                                #irc_got_child_stdout => 'on_child_stdout',
                                #irc_got_child_stderr => 'on_child_stderr',
                                #irc_got_child_close  => 'on_child_close',
                                #irc_got_child_signal => 'on_child_signal',
                             };
          bless($self,$class); 
          return $self 
        }
sub _start { my $self = $_[OBJECT]; print STDERR ref($self)." start\n"; }
sub _stop  { my $self = $_[OBJECT]; print STDERR ref($self)." stop \n"; }
sub states { my $self = $_[OBJECT]; return $self->{'states'};           }
1;

package Jarvis::Jabber;
use POE;
sub new   { 
             my $class = shift; 
             my $self = {}; 
             $self->{'states'} = { 
                                   _start               => '_start',
                                   _stop                => '_stop',
                                   #input_event          => 'input_event',
                                   #error_event          => 'error_event',
                                   #status_event         => 'status_event',
                                   #test_message         => 'test_message',
                                   #output_event         => 'output_event',
                                   #join_channel         => 'join_channel',
                                   #leave_channel        => 'leave_channel',
                                   #send_presence        => 'send_presence',
                                   #presence_subscribe   => 'presence_subscribe',
                                   #approve_subscription => 'approve_subscription',
                                   #refuse_subscription  => 'refuse_subscription',
                                 };
             bless($self,$class); 
             return $self 
           }
sub states { my $self = $_[OBJECT]; return $self->{'states'}; }
sub _start { my $self = $_[OBJECT]; print STDERR ref($self)." start\n"; }
sub _stop  { my $self = $_[OBJECT]; print STDERR ref($self)." stop\n";  }
1;

################################################################################
# session constructor package
################################################################################
package POE::Builder;
use POE;
sub new { 
    my $class = shift; 
    my $self = {}; 
    $self->{'session_struct'}={};
    bless($self,$class);
    return $self;
}

sub add_poe_object {
use YAML;
    my $self = shift;
    my $object = shift if @_;
    my $handle = shift if @_;
    if(defined($self->{'session_struct'}->{'heap_objects'}->{$handle})){
       print STDERR "Unable to add duplicate handle $handle. Skipping...\n";
       return $self;
    }else{
        $self->{'session_struct'}->{'heap_objects'}->{$handle} = $object;
    }
    my $object_states=$object->states();
    my $handled_object_states;
    foreach my $event (keys(%{ $object_states })){
       $handled_object_states->{$handle.$event} = $object_states->{$event};
    }
    push(@{ $self->{'session_struct'}->{'object_states'} }, $object => $handled_object_states );
    return $self;
}

sub object_states{
    my $self = shift; 
    return $self->{'session_struct'}->{'object_states'} if $self->{'session_struct'}->{'object_states'};
    return undef;
}

sub heap_objects{
    my $self = shift; 
    return $self->{'session_struct'}->{'heap_objects'} if $self->{'session_struct'}->{'heap_objects'};
    return undef;
}

sub create(){
    my $self=shift;
    POE::Session->create(
                          #options => { debug => 1, trace => 1 },
                          object_states =>  $self->object_states(), 
                          inline_states =>  {
                                              # loop through all the object's _start methods (_start is required)
                                              _start   => sub { 
                                                                my ($kernel, $heap) = @_[KERNEL, HEAP];
                                                                foreach my $poe_handle (keys(%{ $self->heap_objects })){
                                                                    $kernel->yield( $poe_handle."_start");
                                                                } 
                                                                $kernel->yield("_stop");
                                                              }, # loop through all the object's _start methods (_stop is required) # none of these run for some reason, ugh.
                                              _stop    => sub {
                                                                my ($kernel, $heap) = @_[KERNEL, HEAP];
                                                                #foreach my $poe_handle (keys(%{ $self->heap_objects })){
                                                                    $kernel->yield('irc_stop');
                                                                    $kernel->yield('xmpp_stop');
                                                                #} 
                                                              },
    
                                            },
                          heap           => { 'objects'  => $self->heap_objects() }
                    );
}


1;

################################################################################
# Actual bot;
################################################################################
$ENV{'PATH'}='/usr/local/bin:/usr/bin:/bin';
$ENV{'IFS'}=' \t\n';
BEGIN { unshift @INC, './lib' if -d './lib'; }

use Data::Dumper;
use Jarvis::IRC;
use Jarvis::Jabber;
use POE::Builder;

my $session = new POE::Builder;
# $session->add_poe_object( $object, $handle );
$session->add_poe_object( new Jarvis::IRC, 'irc');
$session->add_poe_object( new Jarvis::Jabber, 'xmpp');
$session->create();
POE::Kernel->run();
#print "\n\n\n\n\n\n\n".Data::Dumper->Dump([$session]);
